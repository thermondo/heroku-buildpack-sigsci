#!/usr/bin/env bash
set -Eeuo pipefail

# https://devcenter.heroku.com/articles/buildpack-api#bin-compile

BUILD_DIR="${1}"
CACHE_DIR="${2}"
# ENV_DIR="${3}"
THIS_DIR="$(dirname "$(readlink -f "${0}")")"

panic() {
    echo "FATAL: ${*}" | indent
    exit 1
}

step() {
    echo "-----> ${*}"
}

info() {
    echo "${*}" | indent
}

indent() {
    sed 's/^/       /'
}

curl_download() {
    local url="${1}"
    curl --proto '=https' --tlsv1.2 \
        --silent \
        --show-error \
        --fail \
        --location "${url}"
}

latest_version() {
    curl_download "https://dl.signalsciences.net/sigsci-agent/VERSION"
}

main() {
    local version download_path layer_dir agent_url

    if [ "${SIGSCI_RELEASE:-}" == "" ]; then
        step "Asking Signal Sciences for latest agent version..."
        version="$(latest_version)"

        # make sure we have a version of the agent we've tested with (currently 4.x)
        case "${version}" in
            4.*)
                info "SigSci Agent version: ${version}"
            ;;
            *)
                indent <<EOF
-------------------------------------------------------------------
Expected SigSci Agent version 4.x -- got ${version}.
Rather that installing / running new major versions automatically,
we're going to abort so you have an opportunity to test first. You
can override this behavior by pinning the version you want with
the SIGSCI_RELEASE environment variable. Also check...

    https://github.com/thermondo/heroku-buildpack-sigsci/

...for a new buildpack release that supports ${version}.
-------------------------------------------------------------------
EOF
                panic "Aborting install due to new major release."
            ;;
        esac
    else
        version="${SIGSCI_RELEASE}"
    fi

    mkdir --parent "${CACHE_DIR}"
    download_path="${CACHE_DIR}/${version}.tar.gz"
    if [ -f "${download_path}" ]; then
        step "Found SigSci Agent ${version} in download cache"
    else
        agent_url="https://dl.signalsciences.net/sigsci-agent/${version}/linux/sigsci-agent_${version}.tar.gz"
        step "Downloading SigSci Agent from ${agent_url}..."
        curl_download "${agent_url}" > "${download_path}.tmp"
        mv "${download_path}.tmp" "${download_path}"
    fi

    step "Extracting SigSci Agent..."
    layer_dir="${BUILD_DIR}/.sigsci"
    dest_bin_dir="${layer_dir}/bin"
    mkdir --parent "${dest_bin_dir}"
    tar --extract --gzip --to-stdout --file "${download_path}" "sigsci-agent" > "${dest_bin_dir}/sigsci-agent"
    chmod ugo=rx "${dest_bin_dir}/sigsci-agent"
    "${dest_bin_dir}/sigsci-agent" --version | indent
    cp "${THIS_DIR}/sigsci-wrap" "${dest_bin_dir}"
    chmod -R ugo=rx "${dest_bin_dir}"

    step "Installing profile.d script"
    local profile_dir="${BUILD_DIR}/.profile.d"
    mkdir --parent "${profile_dir}"
    cat <<EOF > "${profile_dir}/sigsci.sh"
export PATH="\${HOME}/.sigsci/bin:\${PATH}"
EOF
    chmod ugo=rx "${profile_dir}/sigsci.sh"
}

main
